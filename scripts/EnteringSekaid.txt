# https://www.notion.so/kira-network/SEKAI-Installation-be79e6d6514b43fb8de1ffa44ba9a344

#Завантаження docker base-image для секайд
IMG_VERSION="v0.13.7" && \
BASE_NAME="sekaiTest" && BASE_IMG="ghcr.io/kiracore/docker/base-image:$IMG_VERSION" && \
sudo docker run -i -t -d --privileged --net bridge --name $BASE_NAME --hostname test.local $BASE_IMG /bin/bash

#запуск в інтерактивному моді base-image
sudo docker start -i sekaiTest
# жмем ентр після 



#встановлення голангу
GO_VER="1.20.3"&&\\
mkdir ~/tmp || cd ~/tmp || echo "Entered tmp dir" &&\
wget "https://go.dev/dl/go${GO_VER}.linux-amd64.tar.gz" && \
rm -rf /usr/local/go && tar -C /usr/local -xzf "go${GO_VER}.linux-amd64.tar.gz" || echo "Go installed" && \
echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.profile && \
source ~/.profile 

#версія секайд + папка де буде встановленно
cd $HOME &&\
setGlobEnv SEKAI_VERSION "v0.3.14" &&\
setGlobEnv SEKAI_REPO "$HOME/sekai" && \
loadGlobEnvs

#перехід в папку секайда +скачування з гіт 
cd $HOME && \
rm -fvr $SEKAI_REPO && mkdir $SEKAI_REPO && \
git clone https://github.com/KiraCore/sekai.git -b $SEKAI_VERSION $SEKAI_REPO 

# встановлення секайду
cd $SEKAI_REPO && chmod -R 777 ./scripts && \
make install && echo "SUCCESS installed sekaid $(sekaid version)" || echo "FAILED"

#ініціація утілз функцій (по дефолту чомусь не ініціюються при встановлені)
. ~/sekai/scripts/sekai-utils.sh && \
source ~/sekai/scripts/sekai-utils.sh

#імя нетворку
cd $HOME && \
NETWORK_NAME="mynetwork" && \
setGlobEnv NETWORK_NAME $NETWORK_NAME && \
setGlobEnv SEKAID_HOME ~/.sekaid-$NETWORK_NAME && \
rm -rfv "$SEKAID_HOME" "$INTERXD_HOME" && \
loadGlobEnvs

#створюєм новий акаунт валідатора додаєм його і ставим його як генезіс акаунт 
sekaid init --overwrite --chain-id=$NETWORK_NAME "KIRA TEST LOCAL VALIDATOR NODE" --home=$SEKAID_HOME

echo $(addAccount validator | jq .mnemonic | xargs) > $SEKAID_HOME/sekai.mnemonic
echo $(addAccount faucet | jq .mnemonic | xargs) > $INTERXD_HOME/faucet.mnemonic

sekaid add-genesis-account $(showAddress validator) 150000000000000ukex,300000000000000test,2000000000000000000000000000samolean,1000000lol --keyring-backend=test --home=$SEKAID_HOME
sekaid add-genesis-account $(showAddress faucet) 150000000000000ukex,300000000000000test,2000000000000000000000000000samolean,1000000lol --keyring-backend=test --home=$SEKAID_HOME

sekaid gentx-claim validator --keyring-backend=test --moniker="GENESIS VALIDATOR" --home=$SEKAID_HOME




# тут хз що
cat > /etc/systemd/system/sekai.service << EOL
[Unit]
Description=Local KIRA Test Network
After=network.target
[Service]
MemorySwapMax=0
Type=simple
User=root
WorkingDirectory=/root
ExecStart=$GOBIN/sekaid start --home=$SEKAID_HOME --trace
Restart=always
RestartSec=5
LimitNOFILE=4096
[Install]
WantedBy=default.target
EOL

# активуєм сервіс секайду   
systemctl enable sekai 
# запускаєм його
systemctl start sekai

# дивимся чи все ок хоча хз для чого файл .NodeInfo.network

NETWORK_STATUS_CHAIN_ID=$(showStatus | jq .NodeInfo.network | xargs)

if [ "$NETWORK_NAME" != "$NETWORK_STATUS_CHAIN_ID" ] ; then
    echoErr "ERROR: Incorrect chain ID from the status query, expected '$NETWORK_NAME', but got $NETWORK_STATUS_CHAIN_ID"
fi




#                                           #
#                                           #
#                                           #
#                                           #
#                                           #
#   З А П У С К А Є М      І Н Т Е Р А К С  #
#                                           #
#                                           #
#                                           #
#                                           #
#                                           #



#Завантаження docker base-image для інтеракс
IMG_VERSION="v0.13.7" && \
BASE_NAME_INTERAX="interaxTest" && BASE_IMG="ghcr.io/kiracore/docker/base-image:$IMG_VERSION" && \
sudo docker run -i -t -d --privileged --net bridge --name $BASE_NAME_INTERAX --hostname test.local $BASE_IMG /bin/bash

#запуск в інтерактивному моді base-image
sudo docker start -i $BASE_NAME_INTERAX

#встановлення голангу
GO_VER="1.20.3"&&\\
mkdir ~/tmp || cd ~/tmp || echo "Entered tmp dir" &&\
wget "https://go.dev/dl/go${GO_VER}.linux-amd64.tar.gz" && \
rm -rf /usr/local/go && tar -C /usr/local -xzf "go${GO_VER}.linux-amd64.tar.gz" || echo "Go installed" && \
echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.profile && \
source ~/.profile 

NETWORK_NAME="mynetwork"
setGlobEnv INTERXD_HOME ~/.interxd-$NETWORK_NAME
setGlobEnv NETWORK_NAME $NETWORK_NAME
INTERX_BRANCH="v0.4.21"
DEFAULT_INTERX_PORT=11000
loadGlobEnvs


cd $HOME && rm -fvr ./interx && \
git clone https://github.com/KiraCore/interx.git -b "release/$INTERX_BRANCH" && \
cd ./interx && chmod -R 777 ./scripts && \

set -e
make install && echo "SUCCESS" || echo "FAILED" 
make test && echo "SUCCESS" || echo "FAILED" 
make test-local && echo "SUCCESS" || echo "FAILED" 

. /etc/profile

#mynetwork NETWORK_NAME ТАКЕ саме як і у секайді ставити 



rm -rfv "$SEKAID_HOME" "$INTERXD_HOME" 
mkdir -p "$SEKAID_HOME" "$INTERXD_HOME/cache"

cp /interxd $GOBIN && echo "SUCCESS interxd copied" || echo "FAILED interxd copied" 



echo $(addAccount interx | jq .mnemonic | xargs) > $INTERXD_HOME/interx.mnemonic
# тут треба дістати faucet акаун з секайда напевно
echo $(addAccount faucet | jq .mnemonic | xargs) > $INTERXD_HOME/faucet.mnemonic

interxd init --cache_dir="$INTERXD_HOME/cache" --home="$INTERXD_HOME" --grpc="$CFG_grpc" --rpc="$CFG_rpc" --port="$INTERNAL_API_PORT" \
    --signing_mnemonic="$INTERXD_HOME/interx.mnemonic" \
    --faucet_mnemonic="$INTERXD_HOME/faucet.mnemonic" \
    --port="$DEFAULT_INTERX_PORT" \
    --node_type="validator" \
    --seed_node_id="" \
    --sentry_node_id="" \
    --validator_node_id="$(globGet validator_node_id)" \
    --addrbook="$(globFile KIRA_ADDRBOOK)" \
    --faucet_time_limit=30 \
    --faucet_amounts="100000ukex,20000000test,300000000000000000samolean,1lol" \
    --faucet_minimum_amounts="1000ukex,50000test,250000000000000samolean,1lol" \
    --fee_amounts="ukex 1000ukex,test 500ukex,samolean 250ukex,lol 100ukex"

cat > /etc/systemd/system/interx.service << EOL
[Unit]
Description=Local Interx
After=network.target
[Service]
MemorySwapMax=0
Type=simple
User=root
WorkingDirectory=/root
ExecStart=$GOBIN/interxd start --home="$INTERXD_HOME"
Restart=always
RestartSec=5
LimitNOFILE=4096
[Install]
WantedBy=default.target
EOL

 
 
systemctl enable interx.service 
systemctl start interx.service

INTERX_GATEWAY="127.0.0.1:$DEFAULT_INTERX_PORT"

echoInfo "INFO: Waiting for next block to be produced..."
BLOCK_HEIGHT=$(curl --fail $INTERX_GATEWAY/api/status | jsonParse "interx_info.latest_block_height" || echo "0")
timeout 60 sekai-utils awaitBlocks 2
NEXT_BLOCK_HEIGHT=$(curl --fail $INTERX_GATEWAY/api/status | jsonParse "interx_info.latest_block_height" || echo "0")

if [ $BLOCK_HEIGHT -ge $NEXT_BLOCK_HEIGHT ] ; then
    echoErr "ERROR: INTERX failed to catch up with the latest sekai block height, stuck at $BLOCK_HEIGHT"
fi

echoInfo "INFO: Printing interx status..."
curl --fail $INTERX_GATEWAY/api/status | jq